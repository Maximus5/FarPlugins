#The following variables can be set by the user:
#
#DEBUG - set if a debug build is needed
#
#LINK_ULINK - set if you want to use ulink for linking
#
#VC - set Visual C++ version (VC=8 - 2005, VC=9 - 2008, VC=10 - 2010) (we try to autodetect if not set)
#
#AMD64 - set for x64 build
#  or
#CPU=AMD64 - for x64 build
#
#IA64 - set for IA64 build
#  or
#CPU=IA64 - for IA64 build
#
#(we try to autodetect if not set)
#
#
#FARSYSLOG - for syslog
#
#DISABLE_WOW64_HOOK - set to disable the wow64 hook
#
#DEFFILE - name of user file to include
#
#EXCEPTION_TEST - set to generate Ctrl-Alt-Apps dialog in release
#
#NO_RELEASE_PDB - set to disable pdb generation for release
#
#ASM_LISTING - set to enable assembly, machine code and source listing generation

.SILENT:

#include for user defines if needed
!ifdef DEFFILE
!include $(DEFFILE)
!endif

NAME=diz_c0

!if defined(AMD64) || "$(CPU)" == "AMD64" || "$(PLATFORM)" == "X64" || "$(PLATFORM)" == "x64"
!undef CPU
AMD64=1
DIRBIT=64
OUTNAME=$(NAME)_x64
RCWIN64=/D_WIN64 /DWIN64
!elseif defined(IA64) || "$(CPU)" == "IA64" || "$(PLATFORM)" == "Itanium"
!undef CPU
IA64=1
DIRBIT=IA64
OUTNAME=$(NAME)_IA64
RCWIN64=/D_WIN64 /DWIN64
!else
X86=1
DIRBIT=32
OUTNAME=$(NAME)
RCWIN64=
!endif

!if !defined(VC) && defined(_NMAKE_VER)

!if "$(_NMAKE_VER)">"9"
VC=9
!elseif "$(_NMAKE_VER)">"8"
VC=8
!elseif "$(_NMAKE_VER)">"10"
VC=10
!else
#default
VC=9
!endif
!endif

!ifndef DEBUG
DIRNAME=Release
USEDEBUG=NDEBUG
!else
DIRNAME=Debug
USEDEBUG=_DEBUG
!endif

DEPFILE=bootstrap\diz.vc.dep

OUTDIR=$(DIRNAME).$(DIRBIT).vc

LINK=link.exe
ULINK=ulink.exe
M4=..\..\tools\m4 -P -DFARBIT=$(DIRBIT)
GAWK=..\..\tools\gawk

INTDIR=$(OUTDIR)\obj
!ifdef FARSYSLOG
INTDIR=$(INTDIR)log
!endif

CODDIR=$(OUTDIR)\cod

DEF_FILE = ".\diz_c0.def"

PCH_FILE = "$(INTDIR)\headers.pch"

LINK_OBJS = \
	"$(INTDIR)\CachedWrite.obj" \
	"$(INTDIR)\config.obj" \
	"$(INTDIR)\cvtname.obj" \
	"$(INTDIR)\diz_c0.obj" \
	"$(INTDIR)\dizlist.obj" \
	"$(INTDIR)\farrtl.obj" \
	"$(INTDIR)\farwinapi.obj" \
	"$(INTDIR)\filestr.obj" \
	"$(INTDIR)\format.obj" \
	"$(INTDIR)\headers.obj" \
	"$(INTDIR)\keyboard.obj" \
	"$(INTDIR)\local.obj" \
	"$(INTDIR)\message.obj" \
	"$(INTDIR)\pathmix.obj" \
	"$(INTDIR)\registry.obj" \
	"$(INTDIR)\strmix.obj" \
	"$(INTDIR)\UnicodeString.obj"

UCD_OBJS=\
	"$(INTDIR)\prmem.obj" \
	"$(INTDIR)\CharDistribution.obj" \
	"$(INTDIR)\JpCntx.obj" \
	"$(INTDIR)\LangBulgarianModel.obj" \
	"$(INTDIR)\LangCyrillicModel.obj" \
	"$(INTDIR)\LangGreekModel.obj" \
	"$(INTDIR)\LangHebrewModel.obj" \
	"$(INTDIR)\LangHungarianModel.obj" \
	"$(INTDIR)\LangThaiModel.obj" \
	"$(INTDIR)\nsBig5Prober.obj" \
	"$(INTDIR)\nsCharSetProber.obj" \
	"$(INTDIR)\nsEscCharsetProber.obj" \
	"$(INTDIR)\nsEscSM.obj" \
	"$(INTDIR)\nsEUCJPProber.obj" \
	"$(INTDIR)\nsEUCKRProber.obj" \
	"$(INTDIR)\nsEUCTWProber.obj" \
	"$(INTDIR)\nsGB2312Prober.obj" \
	"$(INTDIR)\nsHebrewProber.obj" \
	"$(INTDIR)\nsLatin1Prober.obj" \
	"$(INTDIR)\nsMBCSGroupProber.obj" \
	"$(INTDIR)\nsMBCSSM.obj" \
	"$(INTDIR)\nsSBCharSetProber.obj" \
	"$(INTDIR)\nsSBCSGroupProber.obj" \
	"$(INTDIR)\nsSJISProber.obj" \
	"$(INTDIR)\nsUniversalDetector.obj" \
	"$(INTDIR)\nsUTF8Prober.obj"

LINK_LIBS=kernel32.lib user32.lib winspool.lib advapi32.lib shell32.lib mpr.lib ole32.lib secur32.lib

DEFINES=\
	/DFAR_UNICODE=4245 \
	/D "UNICODE"\
	/D "_UNICODE"\
	/D "$(USEDEBUG)"\
!if defined(DEBUG) || defined(EXCEPTION_TEST)
	/D "FAR_ALPHA_VERSION"\
!endif
!ifdef DEBUG
	/D "SYSLOG"\
	/D "SYSLOG_FARSYSLOG"\
!endif
	/D "_CRT_SECURE_NO_WARNINGS"\
	/D "_CRT_NON_CONFORMING_SWPRINTFS"

RC_WIDE = /dUNICODE
RC_NAME=$(NAME)
RES = $(INTDIR)\$(NAME).res

# common
CPPFLAGS=/nologo $(MP) /W3 $(FARSYSLOG) /EHs-c- $(DEFINES) /GS- /GR- /Gy /GF /Fo"$(INTDIR)\\" /Fd"$(INTDIR)\\" /J /c
LINKFLAGS=/nologo /dll /def:"$(DEF_FILE)" /out:"$(OUTNAME).dll" /map:"$(OUTNAME).map" /pdb:"$(OUTNAME).pdb" /release /nxcompat /largeaddressaware
ULINKFLAGS=-q -m- -ap -Gz -O- -o- -Gh -Gh- -GF:LARGEADDRESSAWARE

# config-cpecific
!ifdef DEBUG
CPPFLAGS=$(CPPFLAGS) /MTd /Od /Zi
LINKFLAGS=$(LINKFLAGS) /debug
ULINKFLAGS=$(ULINKFLAGS) -v
!else
CPPFLAGS=$(CPPFLAGS) /MT /O2
!ifndef NO_RELEASE_PDB
CPPFLAGS=$(CPPFLAGS) /Zi
LINKFLAGS=$(LINKFLAGS) /debug
!endif
LINKFLAGS=$(LINKFLAGS) /incremental:no /OPT:REF /OPT:ICF
!endif
!ifdef ASM_LISTING
CPPFLAGS=$(CPPFLAGS) /FAcs /Fa"$(CODDIR)\\"
!endif

# platform-cpecific
!ifdef X86
CPPFLAGS=$(CPPFLAGS) /Zp4
!ifndef DEBUG
CPPFLAGS=$(CPPFLAGS) /Oy-
!endif
LINKFLAGS=$(LINKFLAGS) /machine:i386
!elseifdef AMD64
CPPFLAGS=$(CPPFLAGS) /Zp8
LINKFLAGS=$(LINKFLAGS) /machine:amd64
ULINKFLAGS=$(ULINKFLAGS) -Tpe+
!elseifdef IA64
CPPFLAGS=$(CPPFLAGS) /Zp8
LINKFLAGS=$(LINKFLAGS) /machine:IA64
!endif

# compiler-cpecific
!if "$(VC)"=="8"
CPPFLAGS=$(CPPFLAGS) /Wp64
LINKFLAGS=$(LINKFLAGS) /opt:nowin98
!endif

ALL: AllDirs lng depfile
	$(MAKE) /nologo /f makefile_vc build USEDEPS=1

.PHONY: lng
lng: dizlang.templ
	echo generating language files
	..\..\tools\lng.generator.exe -nc -i dizlang.ini -ol . dizlang.templ

.PHONY: depfile
depfile:
	$(GAWK) -f .\scripts\mkdep.awk mkdep.list > $(DEPFILE)

.PHONY: build
build: "$(OUTNAME).dll"

.PHONY: AllDirs
AllDirs:
	if not exist "bootstrap" mkdir "bootstrap"
	if not exist "$(OUTDIR)\" mkdir "$(OUTDIR)"
	if not exist "$(INTDIR)\" mkdir "$(INTDIR)"
!ifdef ASM_LISTING
	if not exist "$(CODDIR)\" mkdir "$(CODDIR)"
!endif

"$(OUTNAME).dll": $(DEF_FILE) $(PCH_FILE) $(LINK_OBJS) $(UCD_OBJS) $(RES)
	echo linking $@
!ifndef LINK_ULINK
	$(LINK) @<<
	$(LINKFLAGS) $(LINK_OBJS) $(UCD_OBJS) $(LINK_LIBS) $(RES)
<<
!else
	$(ULINK) +- @+<<
	$(ULINKFLAGS) $(LINK_OBJS) $(UCD_OBJS) $(RES)
	,"$(OUTNAME).dll","$(OUTDIR)\$(OUTNAME).map"
	,$(LINK_LIBS)
	,"$(DEF_FILE)"
<<
!endif

$(PCH_FILE): headers.cpp headers.hpp
	echo making precompiled headers
	$(CPP) $(CPPFLAGS) headers.cpp /Yc /Fp"$(PCH_FILE)"

.c{$(INTDIR)}.obj::
	$(CPP) @<<
	$(CPPFLAGS) $<
<<

.cpp{$(INTDIR)}.obj::
	$(CPP) @<<
	$(CPPFLAGS) /Yuheaders.hpp /Fp"$(PCH_FILE)" $<
<<

{UCD}.c{$(INTDIR)}.obj::
	$(CPP) @<<
	$(CPPFLAGS) $<
<<

{UCD}.cpp{$(INTDIR)}.obj::
	$(CPP) @<<
	$(CPPFLAGS) $<
<<

$(RES): $(RC_NAME).rc
	@$(RC) $(ENV_INC_OPT) $(RCWIN64) $(RC_WIDE) /fo"$(RES)" $(RC_NAME).rc

!ifdef USEDEPS
!include "$(DEPFILE)"
!endif

MSG=echo generating $@


.PHONY: CLEAN
CLEAN:
	echo cleaning
	for %%i in ("$(INTDIR)\*.*" "$(CODDIR)\*.*" "bootstrap\*.*" "$(OUTDIR)\$(OUTNAME).dll" "$(OUTDIR)\$(OUTNAME).exp" "$(OUTDIR)\$(OUTNAME).lib" "$(OUTDIR)\$(OUTNAME).map" "$(OUTDIR)\$(OUTNAME).pdb" "$(OUTDIR)\*.hlf" "$(OUTDIR)\*.lng") do @if exist %%i del /q /f %%i
